generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  STUDENT
  INSTRUCTOR
  ADMIN
}

enum Difficulty {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
}

enum MaterialType {
  QUIZ
  TEXT
  PDF
  VIDEO
}

model User {
  id          Int       @id @default(autoincrement())
  email       String    @unique
  name        String
  password    String
  role        Role      @default(STUDENT)
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  
  approvedRequest ApproveInstructorRequest?
  isApprovedAccount Boolean @default(false)
  isActiveUser Boolean @default(true)
  
  Cart Cart[]
  courses Course[]
  enrollments Enrollment[]
  
  @@map("users")
}

model ApproveInstructorRequest {
  id          Int       @id @default(autoincrement())
  userId      Int       @unique
  user        User      @relation(fields: [userId], references: [id])
  status      RequestStatus    @default(PENDING)
  certificate String
  createdAt   DateTime  @default(now()) @map("created_at")
  approvedAt  DateTime? @map("approved_at")
  rejectedAt  DateTime? @map("rejected_at")
  
  @@map("approve_request")
}

model Enrollment {
  id          Int       @id @default(autoincrement())
  userId      Int
  user        User      @relation(fields: [userId], references: [id])
  courseId    Int
  course      Course    @relation(fields: [courseId], references: [id])
  createdAt   DateTime  @default(now()) @map("created_at")
  isActive    Boolean   @default(true)

  @@map("enrollments")
}

model Course {
  id          Int       @id @default(autoincrement())
  name        String
  description String
  price       Float     @default(0)
  difficulty  Difficulty
  instructorId Int
  instructor   User   @relation(fields: [instructorId], references: [id])
  modules     Module[]
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  
  categories CourseCategory[]
  enrollment Enrollment[]
  CartItem   CartItem[]
  
  @@map("courses")  
}

model CourseCategory {
  courseId   Int
  categoryId Int
  course     Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  
  @@id([courseId, categoryId])
  @@map("course_categories")
}

model Category {
  id    Int     @id @default(autoincrement())
  name  String  @unique
  courses CourseCategory[]
  
  @@map("categories")
}

model Module {
  id       Int      @id @default(autoincrement())
  name     String
  courseId Int
  course   Course  @relation(fields: [courseId], references: [id])
  lessons  Lesson[]
  createdAt DateTime @default(now()) @map("created_at")
  
  @@map("modules")
}

model Lesson {
  id       Int      @id @default(autoincrement())
  title    String
  content  String?
  moduleId Int
  module   Module  @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  type     MaterialType
  createdAt  DateTime    @default(now()) @map("created_at")
  updatedAt  DateTime    @updatedAt @map("updated_at")
  
  @@map("lessons")
}

model Cart {
  id          Int         @id @default(autoincrement())
  userId      Int
  user        User        @relation(fields: [userId], references: [id])
  cartItems   CartItem[] 

  @@map("carts")
}

model CartItem {
  id          Int       @id @default(autoincrement())
  cartId      Int
  cart        Cart      @relation(fields: [cartId], references: [id], onDelete: Cascade)
  courseId    Int
  course      Course    @relation(fields: [courseId], references: [id])
  totalValue  Float
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  @@map("cart_items")
}