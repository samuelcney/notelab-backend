generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  email           String                    @unique
  name            String
  createdAt       DateTime                  @default(now()) @map("created_at")
  updatedAt       DateTime                  @updatedAt @map("updated_at")
  role            Role                      @default(STUDENT)
  id              String                    @id @default(uuid())
  isActive        Boolean                   @default(true)
  approvedRequest ApproveInstructorRequest?
  cart            Cart[]
  courses         Course[]
  enrollments     Enrollment[]
  userBio         UserBio?

  @@map("users")
}

model UserBio {
  id        Int     @id @default(autoincrement())
  userId    String  @unique
  bio       String?
  phone     String?
  avatarUrl String?
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_bio")
}

model ApproveInstructorRequest {
  id         Int           @id @default(autoincrement())
  userId     String        @unique
  status     RequestStatus @default(PENDING)
  createdAt  DateTime      @default(now()) @map("created_at")
  approvedAt DateTime?     @map("approved_at")
  rejectedAt DateTime?     @map("rejected_at")
  request    Json?         @map("request_data")
  user       User          @relation(fields: [userId], references: [id])

  @@map("approve_request")
}

model Enrollment {
  id        String   @id @default(uuid())
  userId    String
  courseId  String
  createdAt DateTime @default(now()) @map("created_at")
  isActive  Boolean  @default(true)
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])

  @@map("enrollments")
}

model Course {
  id             String           @id @default(uuid())
  name           String
  description    String
  price          Float            @default(0)
  difficulty     Difficulty
  instructorId   String
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @updatedAt @map("updated_at")
  coverImage     String?
  isActiveCourse Boolean          @default(true)
  cartItem       CartItem[]
  categories     CourseCategory[]
  instructor     User             @relation(fields: [instructorId], references: [id])
  enrollment     Enrollment[]
  modules        Module[]

  @@map("courses")
}

model CourseCategory {
  courseId   String
  categoryId Int
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  course     Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@id([courseId, categoryId])
  @@map("course_categories")
}

model Category {
  id      Int              @id @default(autoincrement())
  name    String           @unique
  courses CourseCategory[]

  @@map("categories")
}

model Module {
  id        String   @id @default(uuid())
  name      String
  courseId  String
  createdAt DateTime @default(now()) @map("created_at")
  lessons   Lesson[]
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@map("modules")
}

model Lesson {
  id          String   @id @default(uuid())
  title       String
  moduleId    String
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  videoUrl    String?
  description String?
  module      Module   @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  @@map("lessons")
}

model Cart {
  id        String     @id @default(uuid())
  userId    String
  cartItems CartItem[]
  user      User       @relation(fields: [userId], references: [id])

  @@map("carts")
}

model CartItem {
  id        Int      @id @default(autoincrement())
  cartId    String
  courseId  String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@map("cart_items")
}

model PasswordRequest {
  id         Int      @id @default(autoincrement())
  email      String
  token      String
  isUsed     Boolean  @default(false) @map("is_used")
  isVerified Boolean  @default(false) @map("is_verified")
  createdAt  DateTime @default(now()) @map("created_at")
  expiresAt  DateTime @map("expires_at")

  @@map("password_request")
}

enum Role {
  STUDENT
  INSTRUCTOR
  ADMIN
}

enum Difficulty {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
}
