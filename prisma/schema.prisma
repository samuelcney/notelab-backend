generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  email             String                    @unique
  name              String
  createdAt         DateTime                  @default(now()) @map("created_at")
  updatedAt         DateTime                  @updatedAt @map("updated_at")
  role              Role                      @default(STUDENT)
  id                String                    @id @default(uuid())
  isActiveUser      Boolean                   @default(true)
  isApprovedAccount Boolean                   @default(false)
  approvedRequest   ApproveInstructorRequest?
  cart              Cart[]
  courses           Course[]
  enrollments       Enrollment[]
  userBio           UserBio?

  @@map("users")
}

model UserBio {
  id        Int     @id @default(autoincrement())
  userId    String  @unique
  bio       String?
  phone     String?
  avatarUrl String?
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_bio")
}

model ApproveInstructorRequest {
  id          Int           @id @default(autoincrement())
  userId      String        @unique
  status      RequestStatus @default(PENDING)
  createdAt   DateTime      @default(now()) @map("created_at")
  approvedAt  DateTime?     @map("approved_at")
  certificate String
  rejectedAt  DateTime?     @map("rejected_at")
  user        User          @relation(fields: [userId], references: [id])

  @@map("approve_request")
}

model Enrollment {
  id        Int      @id @default(autoincrement())
  userId    String
  courseId  Int
  createdAt DateTime @default(now()) @map("created_at")
  isActive  Boolean  @default(true)
  course    Course   @relation(fields: [courseId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@map("enrollments")
}

model Course {
  id               Int              @id @default(autoincrement())
  name             String
  description      String
  price            Float            @default(0)
  difficulty       Difficulty
  instructorId     String
  createdAt        DateTime         @default(now()) @map("created_at")
  updatedAt        DateTime         @updatedAt @map("updated_at")
  coverImage       String?
  issueCertificate Boolean          @default(false)
  cartItem         CartItem[]
  categories       CourseCategory[]
  instructor       User             @relation(fields: [instructorId], references: [id])
  enrollment       Enrollment[]
  modules          Module[]

  @@map("courses")
}

model CourseCategory {
  courseId   Int
  categoryId Int
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  course     Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@id([courseId, categoryId])
  @@map("course_categories")
}

model Category {
  id      Int              @id @default(autoincrement())
  name    String           @unique
  courses CourseCategory[]

  @@map("categories")
}

model Module {
  id        Int      @id @default(autoincrement())
  name      String
  courseId  Int
  createdAt DateTime @default(now()) @map("created_at")
  lessons   Lesson[]
  course    Course   @relation(fields: [courseId], references: [id])

  @@map("modules")
}

model Lesson {
  id        Int      @id @default(autoincrement())
  title     String
  moduleId  Int
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  duration  Int
  videoUrl  String?
  module    Module   @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  @@map("lessons")
}

model Cart {
  id        Int        @id @default(autoincrement())
  userId    String
  cartItems CartItem[]
  user      User       @relation(fields: [userId], references: [id])

  @@map("carts")
}

model CartItem {
  id         Int      @id @default(autoincrement())
  cartId     Int
  courseId   Int
  totalValue Float
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  cart       Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  course     Course   @relation(fields: [courseId], references: [id])

  @@map("cart_items")
}

enum Role {
  STUDENT
  INSTRUCTOR
  ADMIN
}

enum Difficulty {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
}
